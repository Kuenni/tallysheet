<div id="cumulative_chart"></div>

<style>
	.axis path, .axis line {
		fill: none;
		stroke: #777;
		shape-rendering: crispEdges;
	}
	
	.tick, .legend-items {
		fill: #777
	}

	.browser text {
		text-anchor: end;
	}
</style>

<script>
function cumulative_chart() {
	var margin = {
	    top: 20,
	    right: 0,
	    bottom: 35,
	    left: 50
	}
	var width = $(".container").first().width() - margin.left - margin.right;
	var height = 200 - margin.top - margin.bottom;
	
	var x = d3.time.scale().range([0, width]);
	
	var y = d3.scale.linear().range([height, 0]);
	
	var color = d3.scale.category20();
	
	var xAxis = d3.svg.axis().scale(x).orient('bottom').ticks(d3.time.days, 7)
	    .tickFormat(d3.time.format('%b, %a %d')).tickSize(0).tickPadding(8);
	
	var yAxis = d3.svg.axis().scale(y).orient("left").tickFormat(d3.format("0d"));
	
	var area = d3.svg.area()
	    .x(function(d) {
	        return x(d.x);
	    })
	    .y0(function(d) {
	        return y(d.y0);
	    })
	    .y1(function(d) {
	        return y(d.y0 + d.y);
	    });
	
	var stack = d3.layout.stack()
	    .values(function(d) {
	        return d.values;
	    });
	
	var svg = d3.select("#cumulative_chart").append("svg")
	    .attr("width", width + margin.left + margin.right)
	    .attr("height", height + margin.top + margin.bottom)
	    .append("g")
	    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
	
	d3.json("/dashboard/daily.json", function(error, data) {
	
	    // Map colors.
	    color.domain(data.map(function(d) {
	        return d.name;
	    }));
	
		// Get x-domain.
	    var x_domain = Object.keys(data[0].values).map(function(e) {
	    	return new Date(e);
	    });
	    // Determine range.
	    x.domain(d3.extent(x_domain));
	
		// Transform values array to x-y and compute cum-sum
		data = data.map(function(d) {
			keys = Object.keys(d.values);
			keys.sort();
			sum = 0.0;
			values = keys.map(function(e) {
				sum = sum + d.values[e];
				return {
					x: new Date(e),
					y: sum
				};
			});
			return {
				name: d.name,
				values: values
			};
		});
	
	    // Determine range.
	    y.domain([0, d3.sum(data, function(d) {
	    	if(d.values.length == 0) {
	    		return 0;
	    	}
	        return d.values[d.values.length - 1].y;
	    })]);
	
	    // Stack the data.
	    var browser = svg.selectAll(".browser")
	        .data(stack(data))
	        .enter().append("g")
	        .attr("class", "browser");
	
	    browser.append("path")
	        .attr("class", "area")
	        .attr("d", function(d) {
	            return area(d.values);
	        })
	        .attr("data-legend", function(d) {
	            return d.name
	        })
	        .style("fill", function(d) {
	            return color(d.name);
	        });
	
	    svg.append("g")
	        .attr("class", "x axis")
	        .attr("transform", "translate(0," + height + ")")
	        .call(xAxis);
	
	    svg.append("g")
	        .attr("class", "y axis")
	        .call(yAxis);
		        
	    svg.append("text")
	        .attr("transform", "rotate(-90)")
	        .attr("y", 0 - margin.left)
	        .attr("x",0 - (height / 2))
	        .attr("dy", "1em")
	        .attr("fill", "#777")
	        .style("text-anchor", "middle")
	        .text("cumulative amount");
	
	    svg.append("g")
	        .attr("class", "legend")
	        .attr("transform", "translate(" + margin.left + ",10)")
	        .style("font-size", "14px")
	        .call(d3.legend);
	
	});
}
cumulative_chart();
</script>

